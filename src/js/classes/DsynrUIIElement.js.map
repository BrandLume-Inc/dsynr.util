{"version":3,"file":"DsynrUIIElement.js","sourceRoot":"","sources":["../../ts/classes/DsynrUIIElement.ts"],"names":[],"mappings":"AAAA,MAAe,eAAe;IAgB1B,YAAsB,OAAoB,EAAE,cAAsB,EAAE;QAZpE,WAAM,GAAgB,QAAQ,CAAC,IAAI,CAAC;QAU5B,aAAQ,GAAW,YAAY,CAAC;QAGpC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAC1B,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAED,IAAI;IACJ,CAAC;IAED,IAAI;IACJ,CAAC;IAED,OAAO;IACP,CAAC;IAED,OAAO,CAAC,WAAmB;QACvB,GAAG,CAAC,SAAS,CAAC,CAAC;QAEf,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YACrC,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;SAClC;aAAM;YACH,IAAI,OAAO,GAAQ,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxD,IAAI,OAAO,KAAK,IAAI,EAAE;gBAClB,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBAClC,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;aAClC;SAEJ;IACL,CAAC;IAED,WAAW,CAAC,QAAiB,KAAK;IAClC,CAAC;IAED,KAAK;IACL,CAAC;IAES,OAAO,CAAC,OAAe,EAAE,IAAY;QAC3C,OAAO,SAAS,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,EAAE,GAAG,CAAC,CAAC;IACvE,CAAC;IAES,SAAS;IACnB,CAAC;;AAxDM,yBAAS,GAAe,EAAE,CAAC","sourcesContent":["abstract class DsynrUIIElement implements DsynrUI {\n\n    static instances: Array<any> = [];\n\n    parent: HTMLElement = document.body;\n    instance: HTMLElement;\n\n    protected content: HTMLElement;\n    protected namePrefix: string;\n    protected nameSuffix: string;\n    protected instanceClasses: string;\n    protected animationClasses: string;\n    protected animate: boolean;\n\n    private prefAttr: string = 'dsynr-pref';\n\n    protected constructor(element: HTMLElement, preferences: object = {}) {\n        lfn('DsynrUIIElement');\n        this.content = element;\n        this.setPref(preferences);\n        DsynrUIIElement.instances.push(this);\n    }\n\n    show(): void {\n    }\n\n    hide(): void {\n    }\n\n    destroy(): void {\n    }\n\n    setPref(preferences: object):void {\n        lfn('setPref');\n\n        if (Object.keys(preferences).length > 0) {\n            updateProps(this, preferences);\n        } else {\n            let options: any = getData(this.content, this.prefAttr);\n            if (options !== null) {\n                preferences = JSON.parse(options);\n                updateProps(this, preferences);\n            }\n\n        }\n    }\n\n    setDefaults(reset: boolean = false): void {\n    }\n\n    setup(): void {\n    }\n\n    protected setName(context: string, name: string): string {\n        return concatStr([this.namePrefix, context, this.nameSuffix], '-');\n    }\n\n    protected setActive(): void {\n    }\n}\n"]}